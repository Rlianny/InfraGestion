// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("Domain.Aggregations.Assessments", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TechnicianID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.HasKey("UserID", "TechnicianID", "Date");

                    b.HasIndex("TechnicianID");

                    b.ToTable("Assessments");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("22222222-2222-2222-2222-222222222222"),
                            TechnicianID = new Guid("55555555-5555-5555-5555-555555555555"),
                            Date = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            Score = 4.5
                        });
                });

            modelBuilder.Entity("Domain.Aggregations.Decommissioning", b =>
                {
                    b.Property<Guid>("DecommissioningRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DecommissioningDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceReceiverID")
                        .HasColumnType("TEXT");

                    b.Property<string>("FinalDestination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("TEXT");

                    b.HasKey("DecommissioningRequestID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("DeviceReceiverID");

                    b.ToTable("Decommissionings");

                    b.HasData(
                        new
                        {
                            DecommissioningRequestID = new Guid("abcdef01-abcd-abcd-abcd-abcdef012345"),
                            DecommissioningDate = new DateTime(2025, 10, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartmentID = new Guid("b4c493f9-6b62-48f4-b293-28e30b3d77a8"),
                            DeviceID = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            DeviceReceiverID = new Guid("77777777-7777-7777-7777-777777777777"),
                            FinalDestination = "Donación a institución educativa",
                            Reason = "Equipo obsoleto",
                            RequestDate = new DateTime(2025, 10, 7, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("Domain.Aggregations.DecommissioningRequest", b =>
                {
                    b.Property<Guid>("TechnicianID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceReceiverID")
                        .HasColumnType("TEXT");

                    b.HasKey("TechnicianID", "DeviceID", "Date");

                    b.HasIndex("DeviceID");

                    b.HasIndex("DeviceReceiverID");

                    b.ToTable("DecommissioningRequests");

                    b.HasData(
                        new
                        {
                            TechnicianID = new Guid("66666666-6666-6666-6666-666666666666"),
                            DeviceID = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Date = new DateTime(2025, 10, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            DeviceReceiverID = new Guid("77777777-7777-7777-7777-777777777777")
                        });
                });

            modelBuilder.Entity("Domain.Aggregations.Mainteinance", b =>
                {
                    b.Property<Guid>("TechnicianID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceID")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Cost")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TechnicianID", "DeviceID", "Date");

                    b.HasIndex("DeviceID");

                    b.ToTable("Mainteinances");

                    b.HasData(
                        new
                        {
                            TechnicianID = new Guid("55555555-5555-5555-5555-555555555555"),
                            DeviceID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Date = new DateOnly(2025, 11, 6),
                            Cost = 500.0,
                            Type = "Preventivo"
                        },
                        new
                        {
                            TechnicianID = new Guid("66666666-6666-6666-6666-666666666666"),
                            DeviceID = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Date = new DateOnly(2025, 10, 25),
                            Cost = 1200.0,
                            Type = "Correctivo"
                        });
                });

            modelBuilder.Entity("Domain.Aggregations.ReceivingInspectionRequest", b =>
                {
                    b.Property<Guid>("DeviceID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AdministratorID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TechnicianID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceID", "AdministratorID", "TechnicianID");

                    b.HasIndex("AdministratorID");

                    b.HasIndex("TechnicianID");

                    b.ToTable("ReceivingInspectionRequests");

                    b.HasData(
                        new
                        {
                            DeviceID = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AdministratorID = new Guid("11111111-1111-1111-1111-111111111111"),
                            TechnicianID = new Guid("55555555-5555-5555-5555-555555555555"),
                            AcceptedDate = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            EmissionDate = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("Domain.Aggregations.Rejection", b =>
                {
                    b.Property<Guid>("DeviceReceiverID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TechnicianID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DecommissioningRequestDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RejectionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceReceiverID", "TechnicianID", "DeviceID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("TechnicianID");

                    b.ToTable("Rejections");

                    b.HasData(
                        new
                        {
                            DeviceReceiverID = new Guid("77777777-7777-7777-7777-777777777777"),
                            TechnicianID = new Guid("55555555-5555-5555-5555-555555555555"),
                            DeviceID = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            DecommissioningRequestDate = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            RejectionDate = new DateTime(2025, 10, 7, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("Domain.Aggregations.Transfer", b =>
                {
                    b.Property<Guid>("TransferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DestinySectionID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceReceiverID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceSectionID")
                        .HasColumnType("TEXT");

                    b.HasKey("TransferID");

                    b.HasIndex("DestinySectionID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("DeviceReceiverID");

                    b.HasIndex("SourceSectionID");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SectionID")
                        .HasColumnType("TEXT");

                    b.HasKey("DepartmentID");

                    b.HasIndex("SectionID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = new Guid("8e9b1cc0-35d3-4bf2-9f2c-5e00a21d92a8"),
                            SectionID = new Guid("2a48f950-9a2d-42e4-b324-d510c101247a")
                        },
                        new
                        {
                            DepartmentID = new Guid("b4c493f9-6b62-48f4-b293-28e30b3d77a8"),
                            SectionID = new Guid("53a63a6f-eecc-4a53-83e1-66d8a972cb52")
                        },
                        new
                        {
                            DepartmentID = new Guid("1c0c1962-b336-42bf-a9e0-7b1098da51c4"),
                            SectionID = new Guid("75f23a48-a4b2-4cc9-8c09-f05778d559fd")
                        },
                        new
                        {
                            DepartmentID = new Guid("5abcde20-13fa-416f-85b9-ad1a00ca5959"),
                            SectionID = new Guid("64e12757-0e8d-4b2f-98be-234c37d44553")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("DeviceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OperationalState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeviceID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            DeviceID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AcquisitionDate = new DateTime(2023, 10, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartmentID = new Guid("8e9b1cc0-35d3-4bf2-9f2c-5e00a21d92a8"),
                            Name = "Servidor Principal",
                            OperationalState = 0,
                            Type = 1
                        },
                        new
                        {
                            DeviceID = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AcquisitionDate = new DateTime(2025, 2, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartmentID = new Guid("8e9b1cc0-35d3-4bf2-9f2c-5e00a21d92a8"),
                            Name = "Computadora Desarrollo",
                            OperationalState = 0,
                            Type = 1
                        },
                        new
                        {
                            DeviceID = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AcquisitionDate = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartmentID = new Guid("b4c493f9-6b62-48f4-b293-28e30b3d77a8"),
                            Name = "Máquina Ensamblaje",
                            OperationalState = 0,
                            Type = 0
                        },
                        new
                        {
                            DeviceID = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AcquisitionDate = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartmentID = new Guid("5abcde20-13fa-416f-85b9-ad1a00ca5959"),
                            Name = "Sistema de Comunicación",
                            OperationalState = 0,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Section", b =>
                {
                    b.Property<Guid>("SectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SectionID");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            SectionID = new Guid("2a48f950-9a2d-42e4-b324-d510c101247a"),
                            Name = "Desarrollo de Software"
                        },
                        new
                        {
                            SectionID = new Guid("3f9edad3-41fd-47df-b0af-0f7cc9c28de7"),
                            Name = "Infraestructura"
                        },
                        new
                        {
                            SectionID = new Guid("53a63a6f-eecc-4a53-83e1-66d8a972cb52"),
                            Name = "Línea de Ensamblaje"
                        },
                        new
                        {
                            SectionID = new Guid("64e12757-0e8d-4b2f-98be-234c37d44553"),
                            Name = "Control de Calidad"
                        },
                        new
                        {
                            SectionID = new Guid("75f23a48-a4b2-4cc9-8c09-f05778d559fd"),
                            Name = "Mantenimiento Eléctrico"
                        },
                        new
                        {
                            SectionID = new Guid("86a34c3a-5bb1-4dad-9c0f-77d1469820de"),
                            Name = "Mantenimiento Mecánico"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Administrator", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Administrator");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("11111111-1111-1111-1111-111111111111"),
                            DepartmentID = new Guid("8e9b1cc0-35d3-4bf2-9f2c-5e00a21d92a8"),
                            FullName = "Administrador Principal",
                            PasswordHash = "AdminHash123"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Director", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Director");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("22222222-2222-2222-2222-222222222222"),
                            DepartmentID = new Guid("8e9b1cc0-35d3-4bf2-9f2c-5e00a21d92a8"),
                            FullName = "Director General",
                            PasswordHash = "DirHash123"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DeviceReceiver", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("DeviceReceiver");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("77777777-7777-7777-7777-777777777777"),
                            DepartmentID = new Guid("5abcde20-13fa-416f-85b9-ad1a00ca5959"),
                            FullName = "Receptor Equipos",
                            PasswordHash = "RecHash123"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SectionManager", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<Guid>("SectionID")
                        .HasColumnType("TEXT");

                    b.HasIndex("SectionID");

                    b.HasDiscriminator().HasValue("SectionManager");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("33333333-3333-3333-3333-333333333333"),
                            DepartmentID = new Guid("8e9b1cc0-35d3-4bf2-9f2c-5e00a21d92a8"),
                            FullName = "Gerente Desarrollo",
                            PasswordHash = "GerHash123",
                            SectionID = new Guid("2a48f950-9a2d-42e4-b324-d510c101247a")
                        },
                        new
                        {
                            UserID = new Guid("44444444-4444-4444-4444-444444444444"),
                            DepartmentID = new Guid("b4c493f9-6b62-48f4-b293-28e30b3d77a8"),
                            FullName = "Gerente Producción",
                            PasswordHash = "GerHash456",
                            SectionID = new Guid("53a63a6f-eecc-4a53-83e1-66d8a972cb52")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Technician", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Technician");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("55555555-5555-5555-5555-555555555555"),
                            DepartmentID = new Guid("8e9b1cc0-35d3-4bf2-9f2c-5e00a21d92a8"),
                            FullName = "Técnico Informática",
                            PasswordHash = "TecHash123",
                            Specialty = "Redes",
                            YearsOfExperience = 5
                        },
                        new
                        {
                            UserID = new Guid("66666666-6666-6666-6666-666666666666"),
                            DepartmentID = new Guid("1c0c1962-b336-42bf-a9e0-7b1098da51c4"),
                            FullName = "Técnico Eléctrico",
                            PasswordHash = "TecHash456",
                            Specialty = "Electricidad Industrial",
                            YearsOfExperience = 8
                        });
                });

            modelBuilder.Entity("Domain.Aggregations.Assessments", b =>
                {
                    b.HasOne("Domain.Entities.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technician");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Aggregations.Decommissioning", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DeviceReceiver", "DeviceReceiver")
                        .WithMany()
                        .HasForeignKey("DeviceReceiverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Device");

                    b.Navigation("DeviceReceiver");
                });

            modelBuilder.Entity("Domain.Aggregations.DecommissioningRequest", b =>
                {
                    b.HasOne("Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DeviceReceiver", "DeviceReceiver")
                        .WithMany()
                        .HasForeignKey("DeviceReceiverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("DeviceReceiver");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Domain.Aggregations.Mainteinance", b =>
                {
                    b.HasOne("Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Domain.Aggregations.ReceivingInspectionRequest", b =>
                {
                    b.HasOne("Domain.Entities.Administrator", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");

                    b.Navigation("Device");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Domain.Aggregations.Rejection", b =>
                {
                    b.HasOne("Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DeviceReceiver", "DeviceReceiver")
                        .WithMany()
                        .HasForeignKey("DeviceReceiverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("DeviceReceiver");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Domain.Aggregations.Transfer", b =>
                {
                    b.HasOne("Domain.Entities.Section", "DestinySection")
                        .WithMany()
                        .HasForeignKey("DestinySectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DeviceReceiver", "DeviceReceiver")
                        .WithMany()
                        .HasForeignKey("DeviceReceiverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Section", "SourceSection")
                        .WithMany()
                        .HasForeignKey("SourceSectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinySection");

                    b.Navigation("Device");

                    b.Navigation("DeviceReceiver");

                    b.Navigation("SourceSection");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.HasOne("Domain.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.SectionManager", b =>
                {
                    b.HasOne("Domain.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });
#pragma warning restore 612, 618
        }
    }
}
