// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251027103904_InitialMigration")]
    partial class InitialMigration
    {
        
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("Domain.Aggregations.Decommissioning", b =>
                {
                    b.Property<int>("DecommissioningRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DecommissioningDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DecommissioningID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceReceiverID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FinalDestination")
                        .HasColumnType("TEXT");

                    b.Property<int>("Reason")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceiverDepartmentID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DecommissioningRequestID");

                    b.ToTable("Decommissionings");

                    b.HasData(
                        new
                        {
                            DecommissioningRequestID = -2,
                            DecommissioningDate = new DateTime(2025, 10, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DecommissioningID = -1,
                            DeviceID = -4,
                            DeviceReceiverID = -20,
                            FinalDestination = "Reciclaje",
                            Reason = 4,
                            ReceiverDepartmentID = -23
                        });
                });

            modelBuilder.Entity("Domain.Aggregations.DecommissioningRequest", b =>
                {
                    b.Property<int>("TechnicianID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DecommissioningRequestID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceReceiverID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TechnicianID", "DeviceID", "Date");

                    b.ToTable("DecommissioningRequests");

                    b.HasData(
                        new
                        {
                            TechnicianID = -14,
                            DeviceID = -3,
                            Date = new DateTime(2025, 10, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            DecommissioningRequestID = -1,
                            DeviceReceiverID = -19
                        },
                        new
                        {
                            TechnicianID = -15,
                            DeviceID = -4,
                            Date = new DateTime(2025, 10, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DecommissioningRequestID = -2,
                            DeviceReceiverID = -20
                        });
                });

            modelBuilder.Entity("Domain.Aggregations.MaintenanceRecord", b =>
                {
                    b.Property<int>("TechnicianID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Cost")
                        .HasColumnType("REAL");

                    b.Property<int>("MaintenanceRecordID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("TechnicianID", "DeviceID", "Date");

                    b.ToTable("Mainteinances");

                    b.HasData(
                        new
                        {
                            TechnicianID = -12,
                            DeviceID = -1,
                            Date = new DateOnly(2020, 12, 30),
                            Cost = 0.0,
                            MaintenanceRecordID = -1,
                            Type = "Preventivo"
                        },
                        new
                        {
                            TechnicianID = -13,
                            DeviceID = -2,
                            Date = new DateOnly(2022, 5, 13),
                            Cost = 100.0,
                            MaintenanceRecordID = -2,
                            Type = "Correctivo"
                        },
                        new
                        {
                            TechnicianID = -14,
                            DeviceID = -3,
                            Date = new DateOnly(2022, 10, 10),
                            Cost = 20.0,
                            MaintenanceRecordID = -3,
                            Type = "Correctivo"
                        },
                        new
                        {
                            TechnicianID = -15,
                            DeviceID = -4,
                            Date = new DateOnly(2021, 5, 11),
                            Cost = 10.5,
                            MaintenanceRecordID = -4,
                            Type = "Preventivo"
                        },
                        new
                        {
                            TechnicianID = -16,
                            DeviceID = -5,
                            Date = new DateOnly(2020, 8, 24),
                            Cost = 0.0,
                            MaintenanceRecordID = -5,
                            Type = "Correctivo"
                        },
                        new
                        {
                            TechnicianID = -14,
                            DeviceID = -5,
                            Date = new DateOnly(2022, 7, 18),
                            Cost = 0.0,
                            MaintenanceRecordID = -6,
                            Type = "Correctivo"
                        });
                });

            modelBuilder.Entity("Domain.Aggregations.PerformanceRating", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicianID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("PerformanceRatingID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.HasKey("UserID", "TechnicianID", "Date");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("Domain.Aggregations.ReceivingInspectionRequest", b =>
                {
                    b.Property<int>("DeviceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdministratorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicianID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReceivingInspectionRequestID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceID", "AdministratorID", "TechnicianID");

                    b.ToTable("ReceivingInspectionRequests");
                });

            modelBuilder.Entity("Domain.Aggregations.Rejection", b =>
                {
                    b.Property<int>("DeviceReceiverID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicianID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DecommissioningRequestDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RejectionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RejectionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeviceReceiverID", "TechnicianID", "DeviceID");

                    b.ToTable("Rejections");
                });

            modelBuilder.Entity("Domain.Aggregations.Transfer", b =>
                {
                    b.Property<int>("TransferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DestinationSectionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceReceiverID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceSectionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransferID");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SectionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = -1,
                            Name = "Conmutación y Enrutamiento Avanzado",
                            SectionID = -1
                        },
                        new
                        {
                            DepartmentID = -2,
                            Name = "Seguridad Perimetral y Firewalls",
                            SectionID = -1
                        },
                        new
                        {
                            DepartmentID = -3,
                            Name = "Reparaciones de Red",
                            SectionID = -1
                        },
                        new
                        {
                            DepartmentID = -4,
                            Name = "Servidores y Virtualización",
                            SectionID = -2
                        },
                        new
                        {
                            DepartmentID = -5,
                            Name = "Almacenamiento y Backup",
                            SectionID = -2
                        },
                        new
                        {
                            DepartmentID = -6,
                            Name = "Infraestructura Física y Climatización",
                            SectionID = -2
                        },
                        new
                        {
                            DepartmentID = -7,
                            Name = "Instalaciones y Activaciones",
                            SectionID = -3
                        },
                        new
                        {
                            DepartmentID = -8,
                            Name = "Mantenimiento Correctivo y Urgencias",
                            SectionID = -3
                        },
                        new
                        {
                            DepartmentID = -9,
                            Name = "Soporte a Nodos Remotos",
                            SectionID = -3
                        },
                        new
                        {
                            DepartmentID = -10,
                            Name = "Diseño y Ingeniería de Red",
                            SectionID = -4
                        },
                        new
                        {
                            DepartmentID = -11,
                            Name = "Despliegue de Fibra Óptica y Acceso",
                            SectionID = -4
                        },
                        new
                        {
                            DepartmentID = -12,
                            Name = "Mediciones y Certificación de Red",
                            SectionID = -4
                        },
                        new
                        {
                            DepartmentID = -13,
                            Name = "Infraestructura como Servicio",
                            SectionID = -5
                        },
                        new
                        {
                            DepartmentID = -14,
                            Name = "Plataforma como Servicio",
                            SectionID = -5
                        },
                        new
                        {
                            DepartmentID = -15,
                            Name = "Operaciones Cloud y Escalabilidad",
                            SectionID = -5
                        },
                        new
                        {
                            DepartmentID = -16,
                            Name = "Recepción y Diagnóstico Técnico",
                            SectionID = -6
                        },
                        new
                        {
                            DepartmentID = -17,
                            Name = "Reparación y Refabricación",
                            SectionID = -6
                        },
                        new
                        {
                            DepartmentID = -18,
                            Name = "Gestión de Inventario y Distribución",
                            SectionID = -6
                        },
                        new
                        {
                            DepartmentID = -19,
                            Name = "Soporte al Usuario y Helpdesk",
                            SectionID = -7
                        },
                        new
                        {
                            DepartmentID = -20,
                            Name = "Comunicaciones Unificadas y Telefonía IP",
                            SectionID = -7
                        },
                        new
                        {
                            DepartmentID = -21,
                            Name = "Gestión de Activos y Red Local",
                            SectionID = -7
                        },
                        new
                        {
                            DepartmentID = -22,
                            Name = "Arquitectura y Gestión de Firewalls",
                            SectionID = -8
                        },
                        new
                        {
                            DepartmentID = -23,
                            Name = "Monitorización de Amenazas y SOC",
                            SectionID = -8
                        },
                        new
                        {
                            DepartmentID = -24,
                            Name = "Análisis Forense y Respuesta a Incidentes",
                            SectionID = -8
                        });
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.Property<int>("DeviceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OperationalState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeviceID");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            DeviceID = -1,
                            AcquisitionDate = new DateTime(2025, 10, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartmentID = -8,
                            Name = "Router de Agregación ASR 9000",
                            OperationalState = 0,
                            Type = 0
                        },
                        new
                        {
                            DeviceID = -2,
                            AcquisitionDate = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartmentID = -16,
                            Name = "Servidor de Virtualización HP DL380",
                            OperationalState = 1,
                            Type = 1
                        },
                        new
                        {
                            DeviceID = -3,
                            AcquisitionDate = new DateTime(2025, 10, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartmentID = -24,
                            Name = "Firewall de Próxima Generación PA-5200",
                            OperationalState = 0,
                            Type = 0
                        },
                        new
                        {
                            DeviceID = -4,
                            AcquisitionDate = new DateTime(2025, 10, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartmentID = -24,
                            Name = "Sistema UPS Eaton 20kVA",
                            OperationalState = 2,
                            Type = 2
                        },
                        new
                        {
                            DeviceID = -5,
                            AcquisitionDate = new DateTime(2025, 10, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartmentID = -12,
                            Name = "Antena de Radioenlace AirFiber 5XHD",
                            OperationalState = 0,
                            Type = 3
                        },
                        new
                        {
                            DeviceID = -6,
                            AcquisitionDate = new DateTime(2025, 10, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartmentID = -14,
                            Name = "Analizador de Espectro Viavi",
                            OperationalState = 0,
                            Type = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.Section", b =>
                {
                    b.Property<int>("SectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SectionID");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            SectionID = -1,
                            Name = "Operaciones de Red Corporativa"
                        },
                        new
                        {
                            SectionID = -2,
                            Name = "Infraestructura de Centro de Datos (Data Center)"
                        },
                        new
                        {
                            SectionID = -3,
                            Name = "Soporte Técnico en Campo"
                        },
                        new
                        {
                            SectionID = -4,
                            Name = "Planificación y Despliegue de Red"
                        },
                        new
                        {
                            SectionID = -5,
                            Name = "División de Servicios en la Nube (Cloud)"
                        },
                        new
                        {
                            SectionID = -6,
                            Name = "Taller Central y Logística"
                        },
                        new
                        {
                            SectionID = -7,
                            Name = "Infraestructura Interna (TI Interno)"
                        },
                        new
                        {
                            SectionID = -8,
                            Name = "Seguridad Informática (Ciberseguridad)"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Administrator", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Administrator");

                    b.HasData(
                        new
                        {
                            UserID = -1,
                            DepartmentID = -21,
                            FullName = "David González",
                            PasswordHash = "admin01"
                        },
                        new
                        {
                            UserID = -2,
                            DepartmentID = -18,
                            FullName = "Laura Martínez",
                            PasswordHash = "admin02"
                        },
                        new
                        {
                            UserID = -3,
                            DepartmentID = -18,
                            FullName = "Javier Rodríguez",
                            PasswordHash = "admin03"
                        },
                        new
                        {
                            UserID = -4,
                            DepartmentID = -5,
                            FullName = "Carmen Sánchez",
                            PasswordHash = "admin04"
                        },
                        new
                        {
                            UserID = -5,
                            DepartmentID = -3,
                            FullName = "Roberto López",
                            PasswordHash = "admin05"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DeviceReceiver", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("DeviceReceiver");

                    b.HasData(
                        new
                        {
                            UserID = -17,
                            DepartmentID = -9,
                            FullName = "Miguel Ángel Santos",
                            PasswordHash = "rec01"
                        },
                        new
                        {
                            UserID = -18,
                            DepartmentID = -2,
                            FullName = "Ana García",
                            PasswordHash = "rec02"
                        },
                        new
                        {
                            UserID = -19,
                            DepartmentID = -6,
                            FullName = "Luis Fernández",
                            PasswordHash = "rec03"
                        },
                        new
                        {
                            UserID = -20,
                            DepartmentID = -24,
                            FullName = "Marta Jiménez",
                            PasswordHash = "rec04"
                        },
                        new
                        {
                            UserID = -21,
                            DepartmentID = -17,
                            FullName = "Carlos Ruiz",
                            PasswordHash = "rec05"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Director", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Director");

                    b.HasData(
                        new
                        {
                            UserID = -6,
                            DepartmentID = -24,
                            FullName = "Elena Morales",
                            PasswordHash = "dir123"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SectionManager", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<int>("SectionID")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("SectionManager");

                    b.HasData(
                        new
                        {
                            UserID = -7,
                            DepartmentID = -1,
                            FullName = "Sofía Ramírez",
                            PasswordHash = "manager01",
                            SectionID = -1
                        },
                        new
                        {
                            UserID = -8,
                            DepartmentID = -6,
                            FullName = "Alejandro Torres",
                            PasswordHash = "manager02",
                            SectionID = -2
                        },
                        new
                        {
                            UserID = -9,
                            DepartmentID = -7,
                            FullName = "Patricia Herrera",
                            PasswordHash = "manager03",
                            SectionID = -3
                        },
                        new
                        {
                            UserID = -10,
                            DepartmentID = -10,
                            FullName = "Ricardo Díaz",
                            PasswordHash = "manager04",
                            SectionID = -4
                        },
                        new
                        {
                            UserID = -11,
                            DepartmentID = -13,
                            FullName = "Isabel Castro",
                            PasswordHash = "manager05",
                            SectionID = -5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Technician", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Technician");

                    b.HasData(
                        new
                        {
                            UserID = -12,
                            DepartmentID = -3,
                            FullName = "Carlos Méndez",
                            PasswordHash = "tech01",
                            Specialty = "Redes y Comunicaciones",
                            YearsOfExperience = 5
                        },
                        new
                        {
                            UserID = -13,
                            DepartmentID = -6,
                            FullName = "Eduardo Vargas",
                            PasswordHash = "tech02",
                            Specialty = "Servidores y Virtualización",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            UserID = -14,
                            DepartmentID = -9,
                            FullName = "Jorge Silva",
                            PasswordHash = "tech03",
                            Specialty = "Electricidad y Energía",
                            YearsOfExperience = 7
                        },
                        new
                        {
                            UserID = -15,
                            DepartmentID = -22,
                            FullName = "María Ortega",
                            PasswordHash = "tech04",
                            Specialty = "Ciberseguridad",
                            YearsOfExperience = 4
                        },
                        new
                        {
                            UserID = -16,
                            DepartmentID = -11,
                            FullName = "Ana López",
                            PasswordHash = "tech05",
                            Specialty = "Fibra Óptica",
                            YearsOfExperience = 6
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
